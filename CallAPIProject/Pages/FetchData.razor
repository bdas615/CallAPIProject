@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using CallAPIProject.Data
@inject WeatherForecastService ForecastService

@inherits PlaceholderDataBase

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<select @bind="SelectedSort">
    <option value="new">Newest First</option>
    <option value="old">Oldest First</option>
</select>


@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="form-group">
        <input class="form-control" type="text" placeholder="Filter..."
           @bind="Filter"
           @bind:event="oninput">
    </div>

    <table class="table table-striped">
        <thead class="thead-light">
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                if (!IsVisible(forecast))
                    continue;
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code 
{

    private WeatherForecast[] forecasts;

    private string selectedSort;

    public string SelectedSort
    {
        get { return selectedSort; }
        set
        {
            selectedSort = value;
            selectedSortDictionary[selectedSort]();
        }
    }

    Dictionary<string, Action> selectedSortDictionary;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);

        selectedSortDictionary = new Dictionary<string, Action>
            {
                ["old"] = () => forecasts = forecasts.OrderByDescending(s => s.Date).ToArray(),
                ["new"] = () => forecasts = forecasts.OrderBy(s => s.Date).ToArray(),
            };
    }

    public string Filter { get; set; }

    public bool IsVisible(WeatherForecast forecast)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (forecast.Summary.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (forecast.TemperatureC.ToString().StartsWith(Filter) || forecast.TemperatureF.ToString().StartsWith(Filter))
            return true;

        return false;
    }


}
